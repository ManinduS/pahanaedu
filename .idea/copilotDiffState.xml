<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/control/BillingServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/control/BillingServlet.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import model.Cart;&#10;import model.CartItem;&#10;import util.DBUtil;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;&#10;public class OrderDAO {&#10;&#10;    public int saveOrder(&#10;            Integer customerId,&#10;            String customerName,&#10;            String phone,&#10;            String addr1,&#10;            String addr2,&#10;            Cart cart&#10;    ) throws Exception { // DBUtil.getConnection() throws Exception&#10;&#10;        final String sqlOrder = &quot;INSERT INTO orders (customer_id, customer_name, phone, address1, address2, &quot; +&#10;                &quot;subtotal, discount_pct, discount_amt, total) VALUES (?,?,?,?,?,?,?,?,?)&quot;;&#10;&#10;        final String sqlItem  = &quot;INSERT INTO order_items (order_id, item_id, name, qty, unit_price, amount) &quot; +&#10;                &quot;VALUES (?,?,?,?,?,?)&quot;;&#10;&#10;        Connection con = null;&#10;        try {&#10;            con = DBUtil.getConnection();&#10;            con.setAutoCommit(false);&#10;&#10;            try (PreparedStatement psOrder = con.prepareStatement(sqlOrder, Statement.RETURN_GENERATED_KEYS);&#10;                 PreparedStatement psItem  = con.prepareStatement(sqlItem)) {&#10;&#10;                BigDecimal subtotal = cart.getSubtotal();&#10;                BigDecimal discPct  = cart.getDiscountPct();&#10;                BigDecimal discAmt  = cart.getDiscountAmount();&#10;                BigDecimal total    = cart.getTotal();&#10;&#10;                if (customerId == null || customerId &lt;= 0) psOrder.setNull(1, Types.INTEGER);&#10;                else psOrder.setInt(1, customerId);&#10;&#10;                psOrder.setString(2, customerName);&#10;                psOrder.setString(3, phone);&#10;                psOrder.setString(4, addr1);&#10;                psOrder.setString(5, addr2);&#10;                psOrder.setBigDecimal(6, subtotal);&#10;                psOrder.setBigDecimal(7, discPct);&#10;                psOrder.setBigDecimal(8, discAmt);&#10;                psOrder.setBigDecimal(9, total);&#10;                psOrder.executeUpdate();&#10;&#10;                int orderId;&#10;                try (ResultSet rs = psOrder.getGeneratedKeys()) {&#10;                    if (!rs.next()) throw new SQLException(&quot;Failed to obtain generated order id&quot;);&#10;                    orderId = rs.getInt(1);&#10;                }&#10;&#10;                for (CartItem ci : cart.getItems()) {&#10;                    psItem.setInt(1, orderId);&#10;                    psItem.setInt(2, ci.getItem().getId());&#10;                    psItem.setString(3, ci.getItem().getName());&#10;                    psItem.setInt(4, ci.getQty());&#10;                    psItem.setBigDecimal(5, ci.getUnitPrice());&#10;                    psItem.setBigDecimal(6, ci.getAmount());&#10;                    psItem.addBatch();&#10;                }&#10;                psItem.executeBatch();&#10;&#10;                con.commit();&#10;                return orderId;&#10;            } catch (Exception e) {&#10;                if (con != null) try { con.rollback(); } catch (SQLException ignore) {}&#10;                throw e;&#10;            }&#10;        } finally {&#10;            if (con != null) {&#10;                try { con.setAutoCommit(true); } catch (SQLException ignore) {}&#10;                try { con.close(); } catch (SQLException ignore) {}&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package control;&#10;&#10;import dao.OrderDAO;&#10;import model.Cart;&#10;import model.CartItem;&#10;import util.DBUtil;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;&#10;public class OrderDAO {&#10;&#10;    public int saveOrder(&#10;            Integer customerId,&#10;            String customerName,&#10;            String phone,&#10;            String addr1,&#10;            String addr2,&#10;            Cart cart&#10;    ) throws Exception { // DBUtil.getConnection() throws Exception&#10;&#10;        final String sqlOrder = &quot;INSERT INTO orders (customer_id, customer_name, phone, address1, address2, &quot; +&#10;                &quot;subtotal, discount_pct, discount_amt, total) VALUES (?,?,?,?,?,?,?,?,?)&quot;;&#10;&#10;        final String sqlItem  = &quot;INSERT INTO order_items (order_id, item_id, name, qty, unit_price, amount) &quot; +&#10;                &quot;VALUES (?,?,?,?,?,?)&quot;;&#10;&#10;        Connection con = null;&#10;        try {&#10;            con = DBUtil.getConnection();&#10;            con.setAutoCommit(false);&#10;&#10;            try (PreparedStatement psOrder = con.prepareStatement(sqlOrder, Statement.RETURN_GENERATED_KEYS);&#10;                 PreparedStatement psItem  = con.prepareStatement(sqlItem)) {&#10;&#10;                BigDecimal subtotal = cart.getSubtotal();&#10;                BigDecimal discPct  = cart.getDiscountPct();&#10;                BigDecimal discAmt  = cart.getDiscountAmount();&#10;                BigDecimal total    = cart.getTotal();&#10;&#10;                if (customerId == null || customerId &lt;= 0) psOrder.setNull(1, Types.INTEGER);&#10;                else psOrder.setInt(1, customerId);&#10;&#10;                psOrder.setString(2, customerName);&#10;                psOrder.setString(3, phone);&#10;                psOrder.setString(4, addr1);&#10;                psOrder.setString(5, addr2);&#10;                psOrder.setBigDecimal(6, subtotal);&#10;                psOrder.setBigDecimal(7, discPct);&#10;                psOrder.setBigDecimal(8, discAmt);&#10;                psOrder.setBigDecimal(9, total);&#10;                psOrder.executeUpdate();&#10;&#10;                int orderId;&#10;                try (ResultSet rs = psOrder.getGeneratedKeys()) {&#10;                    if (!rs.next()) throw new SQLException(&quot;Failed to obtain generated order id&quot;);&#10;                    orderId = rs.getInt(1);&#10;                }&#10;&#10;                for (CartItem ci : cart.getItems()) {&#10;                    psItem.setInt(1, orderId);&#10;                    psItem.setInt(2, ci.getItem().getId());&#10;                    psItem.setString(3, ci.getItem().getName());&#10;                    psItem.setInt(4, ci.getQty());&#10;                    psItem.setBigDecimal(5, ci.getUnitPrice());&#10;                    psItem.setBigDecimal(6, ci.getAmount());&#10;                    psItem.addBatch();&#10;                }&#10;                psItem.executeBatch();&#10;&#10;                con.commit();&#10;                return orderId;&#10;            } catch (Exception e) {&#10;                if (con != null) try { con.rollback(); } catch (SQLException ignore) {}&#10;                throw e;&#10;            }&#10;        } finally {&#10;            if (con != null) {&#10;                try { con.setAutoCommit(true); } catch (SQLException ignore) {}&#10;                try { con.close(); } catch (SQLException ignore) {}&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/dao/OrderDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/OrderDAO.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import model.Cart;&#10;import model.CartItem;&#10;import util.DBUtil;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;&#10;public class OrderDAO {&#10;&#10;    public int saveOrder(&#10;            Integer customerId,&#10;            String customerName,&#10;            String phone,&#10;            String addr1,&#10;            String addr2,&#10;            Cart cart&#10;    ) throws Exception {&#10;        // DBUtil.getConnection() throws Exception&#10;        Connection conn = DBUtil.getConnection();&#10;        try {&#10;            String sql = &quot;INSERT INTO orders (customer_id, customer_name, phone, addr1, addr2, total) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#10;            ps.setObject(1, customerId);&#10;            ps.setString(2, customerName);&#10;            ps.setString(3, phone);&#10;            ps.setString(4, addr1);&#10;            ps.setString(5, addr2);&#10;            ps.setBigDecimal(6, cart.getTotal());&#10;            ps.executeUpdate();&#10;&#10;            ResultSet rs = ps.getGeneratedKeys();&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            } else {&#10;                throw new SQLException(&quot;Failed to retrieve order ID.&quot;);&#10;            }&#10;        } finally {&#10;            conn.close();&#10;        }&#10;    }&#10;&#10;    public void saveOrderItems(int orderId, Cart cart) throws Exception {&#10;        Connection conn = DBUtil.getConnection();&#10;        try {&#10;            String sql = &quot;INSERT INTO order_items (order_id, item_id, quantity, price) VALUES (?, ?, ?, ?)&quot;;&#10;            PreparedStatement ps = conn.prepareStatement(sql);&#10;            for (CartItem item : cart.getItems()) {&#10;                ps.setInt(1, orderId);&#10;                ps.setInt(2, item.getItem().getId());&#10;                ps.setInt(3, item.getQuantity());&#10;                ps.setBigDecimal(4, item.getItem().getPrice());&#10;                ps.addBatch();&#10;            }&#10;            ps.executeBatch();&#10;        } finally {&#10;            conn.close();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao;&#10;&#10;import model.Cart;&#10;import model.CartItem;&#10;import util.DBUtil;&#10;&#10;import java.math.BigDecimal;&#10;import java.sql.*;&#10;&#10;public class OrderDAO {&#10;&#10;    public int saveOrder(&#10;            Integer customerId,&#10;            String customerName,&#10;            String phone,&#10;            String addr1,&#10;            String addr2,&#10;            Cart cart&#10;    ) throws Exception {&#10;        // DBUtil.getConnection() throws Exception&#10;        Connection conn = DBUtil.getConnection();&#10;        try {&#10;            String sql = &quot;INSERT INTO orders (customer_id, customer_name, phone, addr1, addr2, total) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#10;            ps.setObject(1, customerId);&#10;            ps.setString(2, customerName);&#10;            ps.setString(3, phone);&#10;            ps.setString(4, addr1);&#10;            ps.setString(5, addr2);&#10;            ps.setBigDecimal(6, cart.getTotal());&#10;            ps.executeUpdate();&#10;&#10;            ResultSet rs = ps.getGeneratedKeys();&#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            } else {&#10;                throw new SQLException(&quot;Failed to retrieve order ID.&quot;);&#10;            }&#10;        } finally {&#10;            conn.close();&#10;        }&#10;    }&#10;&#10;    public void saveOrderItems(int orderId, Cart cart) throws Exception {&#10;        Connection conn = DBUtil.getConnection();&#10;        try {&#10;            String sql = &quot;INSERT INTO order_items (order_id, item_id, quantity, price) VALUES (?, ?, ?, ?)&quot;;&#10;            PreparedStatement ps = conn.prepareStatement(sql);&#10;            for (CartItem item : cart.getItems()) {&#10;                ps.setInt(1, orderId);&#10;                ps.setInt(2, item.getItem().getId());&#10;                ps.setInt(3, item.getQty());&#10;                ps.setBigDecimal(4, item.getItem().getPrice());&#10;                ps.addBatch();&#10;            }&#10;            ps.executeBatch();&#10;        } finally {&#10;            conn.close();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>